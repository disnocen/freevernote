#! /bin/bash

#
# Definitions
#
EDITOR=nvim
SEARCH=grep
INDEX=.index.csv

# how many lines to show in the grep command?
after=3
before=0

# defaults
def_directory=$HOME/owncloud/journal
def_notebook=misc

# create the directory if it does not exists already
mkdir -p $def_directory # creates a directory; -p flag

#
# Functions
#
function listNotebooks {
    find $def_directory -type d|grep -o "[A-Za-z0-9].*[A-Za-z0-9]"
    echo $(find . -type d|grep -o "[A-Za-z0-9].*[A-Za-z0-9]")
}

function help {
    echo -e "Usage: fvn <command>, where command in:"  
    echo -e "\tnew tag1 tag2 tag3 tag4 tag5 : create new note and places (optional) tags"   
    echo -e "\tcount: print number of notes"  
    echo -e "\tbuild: build the csv index of all notes"  
    echo -e "\tsearch: search for a note to modify"  
}

# builds the index; useful for searching
# it does this thing each time it is called
function build {
    i=1 
    echo "index,filename" > $def_directory/$INDEX
    for j in $def_directory/*; do 
	echo $i','$j>>$def_directory/$INDEX; 
	i=$(expr $i + 1);
    done
} 

# it creates new note
function new {
   file_name=$(date +%y%m%d_%H%M).md #example 190721_2114.md
   if [[ $1  && -d $def_directory/$1 ]];then
       notebook=$1
   else
       notebook=$def_notebook
   fi
   if [[ -f $def_directory/$def_notebook/$file_name ]]; then
       echo "File exists, please wait a minute at least!"  
   else
       touch $def_directory/$notebook/$file_name
       echo "# (<>)" > $def_directory/$notebook/$file_name
       echo >> $def_directory/$notebook/$file_name
       #echo "tags:: (<>)">> $def_directory/$notebook/$file_name
       echo >> $def_directory/$notebook/$file_name
       echo "(<>)">> $def_directory/$notebook/$file_name
       echo >> $def_directory/$notebook/$file_name
       echo >> $def_directory/$notebook/$file_name
       echo >> $def_directory/$notebook/$file_name
       echo "*Created on " $(date +%Y-%m-%d)"*">> $def_directory/$notebook/$file_name
       $EDITOR $def_directory/$notebook/$file_name
   fi
}

# function used to search
function searchTitle {
    rm $def_directory/.search_list $def_directory/.listed
    echo "il valore da cercare Ã¨ " $1
    if [[ "$1" ]]; then
        #$SEARCH -i --color=auto  -A$after -B$before "$1" $def_directory/*
        if [[ "$2" ]]; then
            $SEARCH -i --color=auto  "# " $def_directory/"$2"/*| $SEARCH -i --color=auto "$1">$def_directory/.search_list; 
        else
            $SEARCH -i --color=auto  "# " $def_directory/*/*| $SEARCH -i --color=auto "$1">$def_directory/.search_list; 
        fi
        #$SEARCH -i --color=auto  "$1" $def_directory/* >$def_directory/.search_list; 
        sed -i -e"s/^/\"/" -e "s/$/\"/" $def_directory/.search_list
        
        for i in $(seq 1 $(less $def_directory/.search_list|wc -l)); do
            echo $i,$(cat $def_directory/.search_list |head -n$i|tail -n1)>>$def_directory/.listed;
        done
        
        cat $def_directory/.listed
        echo "insert the number of the note you want to read"  
        read num
        row=$(less $def_directory/.listed|grep ^$num,)
        if [[ $(echo $OSTYPE|grep darwin) ]];then  
            file=$(echo $row|cut -d, -f2|cut -d: -f1|sed s/\"//|xargs greadlink -f) 
        else
            file=$(echo $row|cut -d, -f2|cut -d: -f1|sed s/\"//|xargs readlink -f) 
        fi
        
        echo "what do you wnat to do with that file?[D]elete, [P]rint, [E]xport or [O]pen?"    
        read answer

        case $answer in
            e)
                echo "exporting file to PDF"  
                $HOME/bin/pandocToPdf.sh $file
                ;;
            o)
                $EDITOR $file
                ;;
            p)
                echo "the file is:"  
                echo $file
                echo "copied to clipboard"  
                echo $file |xclip -selection clipboard
                ;;
            d)
                echo "You sure you want to DELETE this file[y|n]?"
                read ans
                if [[ $ans==y ]]; then
                    echo "removing file..."
                    rm $file
                else
                    echo "ok, the file is still there..."
                fi
                    ;;
            *)
                echo "your option $answer makes no sense...."  
                ;;
        esac
    else
        echo "Specify an expression"  
    fi
} 

function searchText {
    rm $def_directory/.search_list $def_directory/.listed
    if [[ "$1" ]]; then
        #$SEARCH -i --color=auto  -A$after -B$before "$1" $def_directory/*
        $SEARCH -i --color=auto  -A$after -B$before "$1" $def_directory/* >$def_directory/.search_list; 
        #$SEARCH -i --color=auto  "$1" $def_directory/* >$def_directory/.search_list; 
        sed -i -e"s/^/\"/" -e "s/$/\"/" $def_directory/.search_list
        
        for i in $(seq 1 $(less $def_directory/.search_list|wc -l)); do
            echo $i,$(cat $def_directory/.search_list |head -n$i|tail -n1)>>$def_directory/.listed;
        done
        
        cat $def_directory/.listed
        echo "insert the number of the note you want to read"  
        read num
        row=$(less $def_directory/.listed|grep ^$num,)
        echo $row|cut -d, -f2|cut -d: -f1|sed s/\"//|xargs readlink -f |xargs $EDITOR
    else
        echo "Specify an expression"  
    fi
} 

function count {
    echo $(ls $def_directory|wc -l)   
} 

#
# Main
#
if [[ $TERM == "linux" ]]; then
    zenity --info --text="use a terminal"  
else
    case $1 in
        new|-n)
            $1 $2 $3 $4 $5 $6
            ;;
        searchAll|-S)
            searchText $2
            ;;
        search|-s)
            searchTitle $2
            ;;
        count|build|-c)
            $1
            ;;
        help|--help|-h)
            help
            exit
            ;;
        *)
            echo "please choose either 'count', 'build', 'new' or 'search'"  
    esac
fi
