#! /bin/bash

EDITOR=nvim
SEARCH=grep
INDEX=.index.csv

# how many lines to show in the grep command?
after=3
before=0

# directory where to save your journal
directory=$HOME/owncloud/journal
mkdir -p $directory # creates a directory; -p flag

function help {
    echo -e "Usage: fvn <command>, where command in:"  
    echo -e "\tnew tag1 tag2 tag3 tag4 tag5 : create new note and places (optional) tags"   
    echo -e "\tcount: print number of notes"  
    echo -e "\tbuild: build the csv index of all notes"  
    echo -e "\tsearch: search for a note to modify"  
}

# builds the index; useful for searching
# it does this thing each time it is called
function build {
    i=1 
    echo "index,filename" > $directory/$INDEX
    for j in $directory/*; do 
	echo $i','$j>>$directory/$INDEX; 
	i=$(expr $i + 1);
    done
} 

# it creates new note
function new {
   file_name=$(date +%y%m%d_%H%M).md #example 190721_2114.md
   if [[ -f $directory/$file_name ]]; then
       echo "File exists, please wait a minute at least!"  
   else
       touch $directory/$file_name
       echo "## $(date)" > $directory/$file_name
       echo >> $directory/$file_name
       echo "tag:: " $1 $2 $3 $4 $5 >> $directory/$file_name
       echo >> $directory/$file_name
       $EDITOR $directory/$file_name
   fi
}

# function used to search
function searchTitle {
    rm $directory/.search_list $directory/.listed
    echo "il valore da cercare Ã¨ " $1
    if [[ "$1" ]]; then
        #$SEARCH -i --color=auto  -A$after -B$before "$1" $directory/*
        $SEARCH -i --color=auto  "##" $directory/*| $SEARCH -i --color=auto "$1">$directory/.search_list; 
        #$SEARCH -i --color=auto  "$1" $directory/* >$directory/.search_list; 
        sed -i -e"s/^/\"/" -e "s/$/\"/" $directory/.search_list
        
        for i in $(seq 1 $(less $directory/.search_list|wc -l)); do
            echo $i,$(cat $directory/.search_list |head -n$i|tail -n1)>>$directory/.listed;
        done
        
        cat $directory/.listed
        echo "insert the number of the note you want to read"  
        read num
        row=$(less $directory/.listed|grep ^$num,)
        if [[ $(echo $OSTYPE|grep darwin) ]];then  
            echo $row|cut -d, -f2|cut -d: -f1|sed s/\"//|xargs greadlink -f |xargs $EDITOR
        else
            echo $row|cut -d, -f2|cut -d: -f1|sed s/\"//|xargs readlink -f |xargs $EDITOR
        fi
    else
        echo "Specify an expression"  
    fi
} 

function searchText {
    rm $directory/.search_list $directory/.listed
    if [[ "$1" ]]; then
        #$SEARCH -i --color=auto  -A$after -B$before "$1" $directory/*
        $SEARCH -i --color=auto  -A$after -B$before "$1" $directory/* >$directory/.search_list; 
        #$SEARCH -i --color=auto  "$1" $directory/* >$directory/.search_list; 
        sed -i -e"s/^/\"/" -e "s/$/\"/" $directory/.search_list
        
        for i in $(seq 1 $(less $directory/.search_list|wc -l)); do
            echo $i,$(cat $directory/.search_list |head -n$i|tail -n1)>>$directory/.listed;
        done
        
        cat $directory/.listed
        echo "insert the number of the note you want to read"  
        read num
        row=$(less $directory/.listed|grep ^$num,)
        echo $row|cut -d, -f2|cut -d: -f1|sed s/\"//|xargs readlink -f |xargs $EDITOR
    else
        echo "Specify an expression"  
    fi
} 

function count {
    echo $(ls $directory|wc -l)   
} 

if [[ $TERM == "linux" ]]; then
    zenity --info --text="use a terminal"  
else
    case $1 in
        new|-n)
            $1 $2 $3 $4 $5 $6
            ;;
        search|-s)
            searchTitle $2
            ;;
        count|build|-c)
            $1
            ;;
        help|--help|-h)
            help
            exit
            ;;
        *)
            echo "please choose either 'count', 'build', 'new' or 'search'"  
    esac
fi
